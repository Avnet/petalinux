diff -Naur xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/chipidea/ci_hdrc_usb2.c xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/chipidea/ci_hdrc_usb2.c
--- xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/chipidea/ci_hdrc_usb2.c	2017-07-19 05:11:43.000000000 -0700
+++ xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/chipidea/ci_hdrc_usb2.c	2017-12-05 10:10:31.963980165 -0700
@@ -33,6 +33,7 @@
 
 static struct ci_hdrc_platform_data ci_zynq_pdata = {
 	.capoffset	= DEF_CAPOFFSET,
+	.flags          = CI_HDRC_PHY_VBUS_CONTROL,
 };
 
 static const struct of_device_id ci_hdrc_usb2_of_match[] = {
@@ -61,13 +62,8 @@
 		*ci_pdata = *(struct ci_hdrc_platform_data *)match->data;
 		ci_pdata->usb_phy = devm_usb_get_phy_by_phandle(dev, "usb-phy",
 					 0);
-		if (IS_ERR(ci_pdata->usb_phy)) {
-			if (PTR_ERR(ci_pdata->usb_phy) != -ENXIO &&
-			    PTR_ERR(ci_pdata->usb_phy) != -ENODEV)
-				return PTR_ERR(ci_pdata->usb_phy);
-			else
-				ci_pdata->usb_phy = NULL;
-		}
+		if (IS_ERR(ci_pdata->usb_phy))
+			return PTR_ERR(ci_pdata->usb_phy);
 	}
 
 	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
diff -Naur xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/chipidea/core.c xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/chipidea/core.c
--- xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/chipidea/core.c	2017-07-19 05:11:43.000000000 -0700
+++ xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/chipidea/core.c	2017-12-05 10:10:31.964980239 -0700
@@ -61,9 +61,7 @@
 #include <linux/usb/otg.h>
 #include <linux/usb/chipidea.h>
 #include <linux/usb/of.h>
-#include <linux/usb/ulpi.h>
 #include <linux/of.h>
-#include <linux/of_gpio.h>
 #include <linux/phy.h>
 #include <linux/regulator/consumer.h>
 #include <linux/usb/ehci_def.h>
@@ -893,46 +891,6 @@
 	}
 }
 
-#ifdef CONFIG_USB_ULPI
-
-static int ci_hdrc_create_ulpi_phy(struct device *dev, struct ci_hdrc *ci)
-{
-	struct usb_phy *ulpi;
-	int reset_gpio;
-	int ret;
-
-	reset_gpio = of_get_named_gpio(dev->parent->of_node, "xlnx,phy-reset-gpio", 0);
-	if (gpio_is_valid(reset_gpio)) {
-		ret = devm_gpio_request_one(dev, reset_gpio,
-				GPIOF_INIT_LOW, "ulpi resetb");
-		if (ret) {
-			dev_err(dev, "Failed to request ULPI reset gpio: %d\n", ret);
-			return ret;
-		}
-		msleep(5);
-		gpio_set_value_cansleep(reset_gpio, 1);
-		msleep(1);
-	}
-
-	ulpi = otg_ulpi_create(&ulpi_viewport_access_ops,
-		ULPI_OTG_DRVVBUS | ULPI_OTG_DRVVBUS_EXT);
-	if (ulpi) {
-		ulpi->io_priv = ci->hw_bank.abs + 0x170;
-		ci->usb_phy = ulpi;
-	}
-
-	return 0;
-}
-
-#else
-
-static int ci_hdrc_create_ulpi_phy(struct device *dev, struct ci_hdrc *ci)
-{
-	return 0;
-}
-
-#endif
-
 static int ci_hdrc_probe(struct platform_device *pdev)
 {
 	struct device	*dev = &pdev->dev;
@@ -978,13 +936,6 @@
 		ci->phy = devm_phy_get(dev->parent, "usb-phy");
 		ci->usb_phy = devm_usb_get_phy(dev->parent, USB_PHY_TYPE_USB2);
 
-		if (IS_ERR(ci->phy) && IS_ERR(ci->usb_phy) && 
-			 ci->platdata->phy_mode == USBPHY_INTERFACE_MODE_ULPI) {
-			ret = ci_hdrc_create_ulpi_phy(dev, ci);
-			if (ret)
-				return ret;
-		}
-
 		/* if both generic PHY and USB PHY layers aren't enabled */
 		if (PTR_ERR(ci->phy) == -ENOSYS &&
 				PTR_ERR(ci->usb_phy) == -ENXIO)
diff -Naur xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/chipidea/host.c xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/chipidea/host.c
--- xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/chipidea/host.c	2017-07-19 05:11:43.000000000 -0700
+++ xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/chipidea/host.c	2017-12-05 10:10:31.963980165 -0700
@@ -48,16 +48,12 @@
 	int ret = 0;
 	int port = HCS_N_PORTS(ehci->hcs_params);
 
-	if (port > 1) {
-		dev_warn(dev,
-			"Not support multi-port regulator control\n");
-		return 0;
-	}
-
-	if (ci->usb_phy && ci->usb_phy->otg)
-		otg_set_vbus(ci->usb_phy->otg, enable);
-
 	if (priv->reg_vbus) {
+		if (port > 1) {
+			dev_warn(dev,
+				"Not support multi-port regulator control\n");
+			return 0;
+		}
 		if (enable)
 			ret = regulator_enable(priv->reg_vbus);
 		else
@@ -70,6 +66,14 @@
 		}
 	}
 
+	if (ci->platdata->flags & CI_HDRC_PHY_VBUS_CONTROL &&
+			ci->usb_phy && ci->usb_phy->set_vbus) {
+		if (enable)
+			ci->usb_phy->set_vbus(ci->usb_phy, 1);
+		else
+			ci->usb_phy->set_vbus(ci->usb_phy, 0);
+	}
+
 	if (enable && (ci->platdata->phy_mode == USBPHY_INTERFACE_MODE_HSIC)) {
 		/*
 		 * Marvell 28nm HSIC PHY requires forcing the port to HS mode.
diff -Naur xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/chipidea/Kconfig xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/chipidea/Kconfig
--- xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/chipidea/Kconfig	2017-07-19 05:11:43.000000000 -0700
+++ xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/chipidea/Kconfig	2017-12-05 10:10:31.964980239 -0700
@@ -1,7 +1,6 @@
 config USB_CHIPIDEA
 	tristate "ChipIdea Highspeed Dual Role Controller"
 	depends on ((USB_EHCI_HCD && USB_GADGET) || (USB_EHCI_HCD && !USB_GADGET) || (!USB_EHCI_HCD && USB_GADGET)) && HAS_DMA
-	select USB_ULPI_VIEWPORT if USB_ULPI
 	select EXTCON
 	help
 	  Say Y here if your system has a dual role high speed USB
diff -Naur xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/chipidea/otg_fsm.c xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/chipidea/otg_fsm.c
--- xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/chipidea/otg_fsm.c	2017-07-19 05:11:43.000000000 -0700
+++ xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/chipidea/otg_fsm.c	2017-12-05 10:10:31.965980313 -0700
@@ -466,10 +466,6 @@
 		/* Enable power power */
 		hw_write(ci, OP_PORTSC, PORTSC_W1C_BITS | PORTSC_PP,
 							PORTSC_PP);
-
-		if (ci->usb_phy && ci->usb_phy->otg)
-			otg_set_vbus(ci->usb_phy->otg, true);
-
 		if (ci->platdata->reg_vbus) {
 			ret = regulator_enable(ci->platdata->reg_vbus);
 			if (ret) {
@@ -479,6 +475,11 @@
 				return;
 			}
 		}
+
+		if (ci->platdata->flags & CI_HDRC_PHY_VBUS_CONTROL &&
+				ci->usb_phy && ci->usb_phy->set_vbus)
+			ci->usb_phy->set_vbus(ci->usb_phy, 1);
+
 		/* Disable data pulse irq */
 		hw_write_otgsc(ci, OTGSC_DPIE, 0);
 
@@ -487,8 +488,10 @@
 	} else {
 		if (ci->platdata->reg_vbus)
 			regulator_disable(ci->platdata->reg_vbus);
-		if (ci->usb_phy && ci->usb_phy->otg)
-			otg_set_vbus(ci->usb_phy->otg, false);
+
+		if (ci->platdata->flags & CI_HDRC_PHY_VBUS_CONTROL &&
+				ci->usb_phy && ci->usb_phy->set_vbus)
+			ci->usb_phy->set_vbus(ci->usb_phy, 0);
 
 		fsm->a_bus_drop = 1;
 		fsm->a_bus_req = 0;
diff -Naur xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/gadget/function/f_uvc.c xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/gadget/function/f_uvc.c
--- xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/gadget/function/f_uvc.c	2017-07-19 05:11:43.000000000 -0700
+++ xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/gadget/function/f_uvc.c	2017-12-05 10:10:32.017984171 -0700
@@ -258,13 +258,6 @@
 	memcpy(&uvc_event->req, ctrl, sizeof(uvc_event->req));
 	v4l2_event_queue(&uvc->vdev, &v4l2_event);
 
-	/* Pass additional setup data to userspace */
-	if (uvc->event_setup_out && uvc->event_length) {
-		uvc->control_req->length = uvc->event_length;
-		return usb_ep_queue(uvc->func.config->cdev->gadget->ep0,
-			uvc->control_req, GFP_ATOMIC);
-	}
-
 	return 0;
 }
 
diff -Naur xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/phy/Kconfig xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/phy/Kconfig
--- xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/phy/Kconfig	2017-07-19 05:11:43.000000000 -0700
+++ xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/phy/Kconfig	2017-12-05 10:10:32.105990699 -0700
@@ -197,6 +197,8 @@
 config USB_ULPI
 	bool "Generic ULPI Transceiver Driver"
 	depends on ARM || ARM64
+	depends on USB_PHY
+	select USB_ULPI_VIEWPORT
 	help
 	  Enable this to support ULPI connected USB OTG transceivers which
 	  are likely found on embedded boards.
diff -Naur xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/phy/phy-ulpi.c xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/phy/phy-ulpi.c
--- xilinx-linux-mathworks_zynq_R17.2.0/drivers/usb/phy/phy-ulpi.c	2017-07-19 05:11:43.000000000 -0700
+++ xilinx-linux-mathworks_zynq_R17.2.0.new/drivers/usb/phy/phy-ulpi.c	2017-12-05 10:10:32.108990922 -0700
@@ -26,9 +26,16 @@
 #include <linux/kernel.h>
 #include <linux/slab.h>
 #include <linux/export.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
 #include <linux/usb.h>
 #include <linux/usb/otg.h>
 #include <linux/usb/ulpi.h>
+#include <linux/usb/phy.h>
 
 
 struct ulpi_info {
@@ -52,6 +59,13 @@
 	ULPI_INFO(ULPI_ID(0x0451, 0x1507), "TI TUSB1210"),
 };
 
+struct ulpi_phy {
+	struct usb_phy	*usb_phy;
+	void __iomem *regs;
+	unsigned int vp_offset;
+	unsigned int flags;
+};
+
 static int ulpi_set_otg_flags(struct usb_phy *phy)
 {
 	unsigned int flags = ULPI_OTG_CTRL_DP_PULLDOWN |
@@ -253,6 +267,23 @@
 	return usb_phy_io_write(phy, flags, ULPI_OTG_CTRL);
 }
 
+static int usbphy_set_vbus(struct usb_phy *phy, int on)
+{
+	unsigned int flags = usb_phy_io_read(phy, ULPI_OTG_CTRL);
+
+	flags &= ~(ULPI_OTG_CTRL_DRVVBUS | ULPI_OTG_CTRL_DRVVBUS_EXT);
+
+	if (on) {
+		if (phy->flags & ULPI_OTG_DRVVBUS)
+			flags |= ULPI_OTG_CTRL_DRVVBUS;
+
+		if (phy->flags & ULPI_OTG_DRVVBUS_EXT)
+			flags |= ULPI_OTG_CTRL_DRVVBUS_EXT;
+	}
+
+	return usb_phy_io_write(phy, flags, ULPI_OTG_CTRL);
+}
+
 struct usb_phy *
 otg_ulpi_create(struct usb_phy_io_ops *ops,
 		unsigned int flags)
@@ -275,6 +306,7 @@
 	phy->io_ops	= ops;
 	phy->otg	= otg;
 	phy->init	= ulpi_init;
+	phy->set_vbus	= usbphy_set_vbus;
 
 	otg->usb_phy	= phy;
 	otg->set_host	= ulpi_set_host;
@@ -284,3 +316,70 @@
 }
 EXPORT_SYMBOL_GPL(otg_ulpi_create);
 
+static int ulpi_phy_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct resource *res;
+	struct ulpi_phy *uphy;
+	bool flag;
+	int ret;
+
+	uphy = devm_kzalloc(&pdev->dev, sizeof(*uphy), GFP_KERNEL);
+	if (!uphy)
+		return -ENOMEM;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	uphy->regs = devm_ioremap(&pdev->dev, res->start, resource_size(res));
+	if (IS_ERR(uphy->regs))
+		return PTR_ERR(uphy->regs);
+
+	ret = of_property_read_u32(np, "view-port", &uphy->vp_offset);
+	if (IS_ERR(uphy->regs)) {
+		dev_err(&pdev->dev, "view-port register not specified\n");
+		return PTR_ERR(uphy->regs);
+	}
+
+	flag = of_property_read_bool(np, "drv-vbus");
+	if (flag)
+		uphy->flags |= ULPI_OTG_DRVVBUS | ULPI_OTG_DRVVBUS_EXT;
+
+	uphy->usb_phy = otg_ulpi_create(&ulpi_viewport_access_ops, uphy->flags);
+
+	uphy->usb_phy->dev = &pdev->dev;
+
+	uphy->usb_phy->io_priv = uphy->regs + uphy->vp_offset;
+
+	ret = usb_add_phy_dev(uphy->usb_phy);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+static int ulpi_phy_remove(struct platform_device *pdev)
+{
+	struct ulpi_phy *uphy = platform_get_drvdata(pdev);
+
+	usb_remove_phy(uphy->usb_phy);
+
+	return 0;
+}
+
+static const struct of_device_id ulpi_phy_table[] = {
+	{ .compatible = "ulpi-phy" },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, ulpi_phy_table);
+
+static struct platform_driver ulpi_phy_driver = {
+	.probe		= ulpi_phy_probe,
+	.remove		= ulpi_phy_remove,
+	.driver		= {
+		.name	= "ulpi-phy",
+		.of_match_table = ulpi_phy_table,
+	},
+};
+module_platform_driver(ulpi_phy_driver);
+
+MODULE_DESCRIPTION("ULPI PHY driver");
+MODULE_LICENSE("GPL v2");
diff -Naur xilinx-linux-mathworks_zynq_R17.2.0/include/linux/usb/chipidea.h xilinx-linux-mathworks_zynq_R17.2.0.new/include/linux/usb/chipidea.h
--- xilinx-linux-mathworks_zynq_R17.2.0/include/linux/usb/chipidea.h	2017-07-19 05:11:43.000000000 -0700
+++ xilinx-linux-mathworks_zynq_R17.2.0.new/include/linux/usb/chipidea.h	2017-12-05 15:00:51.525620575 -0700
@@ -55,6 +55,7 @@
 #define CI_HDRC_OVERRIDE_AHB_BURST	BIT(9)
 #define CI_HDRC_OVERRIDE_TX_BURST	BIT(10)
 #define CI_HDRC_OVERRIDE_RX_BURST	BIT(11)
+#define CI_HDRC_PHY_VBUS_CONTROL	BIT(12)
 	enum usb_dr_mode	dr_mode;
 #define CI_HDRC_CONTROLLER_RESET_EVENT		0
 #define CI_HDRC_CONTROLLER_STOPPED_EVENT	1
