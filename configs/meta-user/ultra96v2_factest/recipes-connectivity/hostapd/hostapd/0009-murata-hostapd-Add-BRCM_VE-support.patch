diff -urN ahostapd-2.6-patched-partial/src/common/ieee802_11_defs.h bhostapd-2.6-patched-final/src/common/ieee802_11_defs.h
--- ahostapd-2.6-patched-partial/src/common/ieee802_11_defs.h	2016-10-02 13:51:11.000000000 -0500
+++ bhostapd-2.6-patched-final/src/common/ieee802_11_defs.h	2017-11-08 15:17:30.954270000 -0600
@@ -1385,6 +1385,9 @@
 #define WLAN_CIPHER_SUITE_CKIP_CMIC	0x00409601
 #define WLAN_CIPHER_SUITE_CMIC		0x00409602
 #define WLAN_CIPHER_SUITE_KRK		0x004096FF /* for nl80211 use only */
+#ifdef BRCM_VE
+#define WLAN_CIPHER_SUITE_PMK		0x00904C00
+#endif /* BRCM_VE */
 
 /* AKM suite selectors */
 #define WLAN_AKM_SUITE_8021X		0x000FAC01
diff -urN ahostapd-2.6-patched-partial/src/drivers/driver_nl80211.c bhostapd-2.6-patched-final/src/drivers/driver_nl80211.c
--- ahostapd-2.6-patched-partial/src/drivers/driver_nl80211.c	2016-10-02 13:51:11.000000000 -0500
+++ bhostapd-2.6-patched-final/src/drivers/driver_nl80211.c	2017-11-08 15:18:08.231083000 -0600
@@ -2556,6 +2556,11 @@
 		return WLAN_CIPHER_SUITE_KRK;
 	case WPA_ALG_NONE:
 	case WPA_ALG_PMK:
+#if defined(IEEE8021X_EAPOL) && defined(BRCM_VE)
+		wpa_printf(MSG_DEBUG, "nl80211: Selected encryption algorithm "
+			   "WPA_ALG_PMK");
+		return WLAN_CIPHER_SUITE_PMK;
+#endif /* IEEE8021X_EAPOL && BRCM_VE */
 		wpa_printf(MSG_ERROR, "nl80211: Unexpected encryption algorithm %d",
 			   alg);
 		return 0;
@@ -3619,6 +3624,12 @@
 		suites[num_suites++] = WLAN_AKM_SUITE_8021X;
 	if (params->key_mgmt_suites & WPA_KEY_MGMT_PSK)
 		suites[num_suites++] = WLAN_AKM_SUITE_PSK;
+#ifdef BRCM_VE
+	if (params->key_mgmt_suites & WPA_KEY_MGMT_FT_IEEE8021X)
+		suites[num_suites++] = WLAN_AKM_SUITE_FT_8021X;
+	if (params->key_mgmt_suites & WPA_KEY_MGMT_FT_PSK)
+		suites[num_suites++] = WLAN_AKM_SUITE_FT_PSK;
+#endif /* BRCM_VE */
 	if (num_suites &&
 	    nla_put(msg, NL80211_ATTR_AKM_SUITES, num_suites * sizeof(u32),
 		    suites))
diff -urN ahostapd-2.6-patched-partial/src/drivers/driver_nl80211_capa.c bhostapd-2.6-patched-final/src/drivers/driver_nl80211_capa.c
--- ahostapd-2.6-patched-partial/src/drivers/driver_nl80211_capa.c	2016-10-02 13:51:11.000000000 -0500
+++ bhostapd-2.6-patched-final/src/drivers/driver_nl80211_capa.c	2017-11-08 15:18:15.099234000 -0600
@@ -998,6 +998,11 @@
 	drv->capa.auth = WPA_DRIVER_AUTH_OPEN |
 		WPA_DRIVER_AUTH_SHARED |
 		WPA_DRIVER_AUTH_LEAP;
+#if defined(CONFIG_IEEE80211R) && defined(BRCM_VE)
+	/* Also assume that FT-PSK & FT-EAP are supported */
+	drv->capa.key_mgmt |= WPA_DRIVER_CAPA_KEY_MGMT_FT |
+		WPA_DRIVER_CAPA_KEY_MGMT_FT_PSK;
+#endif /* CONFIG_IEEE80211R && BRCM_VE */
 
 	drv->capa.flags |= WPA_DRIVER_FLAGS_SANE_ERROR_CODES;
 	drv->capa.flags |= WPA_DRIVER_FLAGS_SET_KEYS_AFTER_ASSOC_DONE;
diff -urN ahostapd-2.6-patched-partial/src/rsn_supp/wpa.c bhostapd-2.6-patched-final/src/rsn_supp/wpa.c
--- ahostapd-2.6-patched-partial/src/rsn_supp/wpa.c	2017-11-08 15:12:04.786714000 -0600
+++ bhostapd-2.6-patched-final/src/rsn_supp/wpa.c	2017-11-08 15:18:30.827578000 -0600
@@ -22,6 +22,10 @@
 #include "wpa_i.h"
 #include "wpa_ie.h"
 #include "peerkey.h"
+#ifdef BRCM_VE
+#include "../wpa_supplicant/wpa_supplicant_i.h"
+#include "../wpa_supplicant/driver_i.h"
+#endif /* BRCM_VE */
 
 
 static const u8 null_rsc[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
@@ -2975,6 +2979,38 @@
 	pmksa_cache_flush(sm->pmksa, network_ctx, NULL, 0);
 }
 
+#ifdef BRCM_VE
+void wpa_sm_install_pmk(struct wpa_sm *sm)
+{
+	/* In case the driver wants to handle re-assocs, pass it down the PMK. */
+	if (wpa_sm_set_key(sm, WPA_ALG_PMK, NULL, 0, 0, NULL, 0, (u8*)sm->pmk, sm->pmk_len) < 0) {
+		wpa_hexdump(MSG_DEBUG, "PSK: Install PMK to the driver for driver reassociations",
+			    (u8*)sm->pmk, sm->pmk_len);
+		/* No harm if the driver doesn't support. */
+		wpa_msg(sm->ctx->msg_ctx, MSG_DEBUG, "WPA: Failed to set PMK to the driver");
+	}
+}
+
+void wpa_sm_notify_brcm_ft_reassoc(struct wpa_sm *sm, const u8 *bssid)
+{
+	wpa_dbg(sm->ctx->msg_ctx, MSG_DEBUG,
+		"WPA: BRCM FT Reassociation event - clear replay counter");
+	os_memcpy(sm->bssid, bssid, ETH_ALEN);
+	os_memset(sm->rx_replay_counter, 0, WPA_REPLAY_COUNTER_LEN);
+	sm->rx_replay_counter_set = 0;
+
+	if (wpa_drv_driver_cmd(wpa_s, "GET_FTKEY", (char *)buf, sizeof(buf)) < 0) {
+		wpa_msg(sm->ctx->msg_ctx, MSG_ERROR,
+			"WPA: Failed to get FT KEY information");
+	} else {
+		/* update kck and kek */
+		os_memcpy(sm->ptk.kck, buf, 16);
+		os_memcpy(sm->ptk.kek, buf + 16, 16);
+		wpa_msg(sm->ctx->msg_ctx, MSG_ERROR,
+			"WPA: Updated KCK and KEK after FT reassoc");
+	}
+}
+#endif /* BRCM_VE */
 
 #ifdef CONFIG_WNM
 int wpa_wnmsleep_install_key(struct wpa_sm *sm, u8 subelem_id, u8 *buf)
diff -urN ahostapd-2.6-patched-partial/src/rsn_supp/wpa.h bhostapd-2.6-patched-final/src/rsn_supp/wpa.h
--- ahostapd-2.6-patched-partial/src/rsn_supp/wpa.h	2016-10-02 13:51:11.000000000 -0500
+++ bhostapd-2.6-patched-final/src/rsn_supp/wpa.h	2017-11-08 15:19:03.688300000 -0600
@@ -156,6 +156,10 @@
 
 int wpa_sm_get_p2p_ip_addr(struct wpa_sm *sm, u8 *buf);
 
+#ifdef BRCM_VE
+void wpa_sm_install_pmk(struct wpa_sm *sm);
+void wpa_sm_notify_brcm_ft_reassoc(struct wpa_sm *sm, const u8 *bssid);
+#endif /* BRCM_VE */
 void wpa_sm_set_rx_replay_ctr(struct wpa_sm *sm, const u8 *rx_replay_counter);
 void wpa_sm_set_ptk_kck_kek(struct wpa_sm *sm,
 			    const u8 *ptk_kck, size_t ptk_kck_len,
@@ -316,6 +320,12 @@
 {
 }
 
+#ifdef BRCM_VE
+static inline void wpa_sm_install_pmk(struct wpa_sm *sm)
+{
+}
+#endif /* BRCM_VE */
+
 static inline void wpa_sm_set_rx_replay_ctr(struct wpa_sm *sm,
 					    const u8 *rx_replay_counter)
 {
